// Funci√≥n de prueba para simular errores del servidor
// Usar en la consola del navegador para probar el manejo de errores

function testErrorHandling() {
    console.log('üß™ Iniciando pruebas de manejo de errores...');
    
    // Simulaci√≥n 1: Error exacto como aparece en la imagen del usuario
    const exactUserError = {
        success: false,
        message: "Los datos enviados contienen errores. Por favor revisa la informaci√≥n.",
        error_type: "validation",
        errors: {
            email: ["Este email ya est√° registrado en nuestro sistema"]
        },
        timestamp: "2025-10-29 04:21:40"
    };
    
    // Simulaci√≥n 2: Error de validaci√≥n con m√∫ltiples campos
    const multipleErrorsResponse = {
        success: false,
        message: "Los datos enviados contienen errores. Por favor revisa la informaci√≥n.",
        errors: {
            email: ["Este email ya est√° registrado en nuestro sistema"],
            whatsapp: ["Por favor ingresa un n√∫mero de WhatsApp v√°lido (10-20 d√≠gitos)"],
            age: ["Debes tener al menos 15 a√±os para registrarte"],
            consent: ["Debes seleccionar una opci√≥n de consentimiento"]
        },
        error_type: "validation",
        timestamp: "2025-10-29 04:21:40"
    };
    
    // Simulaci√≥n 3: Error √∫nico de validaci√≥n con string directo
    const singleStringError = {
        success: false,
        message: "Los datos enviados contienen errores. Por favor revisa la informaci√≥n.",
        errors: {
            email: "Este email ya est√° registrado en nuestro sistema"
        },
        error_type: "validation",
        timestamp: "2025-10-29 04:21:40"
    };
    
    // Simulaci√≥n 4: Error de servidor general
    const serverErrorResponse = {
        success: false,
        message: "Error interno del servidor. Por favor intenta m√°s tarde",
        error_type: "server",
        timestamp: "2025-10-29 04:21:40"
    };
    
    // Funci√≥n para simular respuesta del servidor
    window.simulateErrorResponse = function(type = 'userExact') {
        let response;
        
        switch(type) {
            case 'userExact':
                response = exactUserError;
                console.log('üéØ Simulando error exacto del usuario...');
                break;
            case 'multiple':
                response = multipleErrorsResponse;
                console.log('üìù Simulando errores m√∫ltiples...');
                break;
            case 'single':
                response = singleStringError;
                console.log('üìù Simulando error √∫nico como string...');
                break;
            case 'server':
                response = serverErrorResponse;
                console.log('üìù Simulando error de servidor...');
                break;
            default:
                response = exactUserError;
        }
        
        console.log('üì§ Enviando respuesta:', JSON.stringify(response, null, 2));
        
        // Llamar directamente a la funci√≥n de manejo de errores
        if (typeof handleErrorResponse === 'function') {
            handleErrorResponse(response);
        } else {
            console.error('‚ùå Funci√≥n handleErrorResponse no encontrada');
        }
    };
    
    // Funci√≥n para probar ValidationError directamente
    window.testValidationError = function() {
        console.log('üß™ Probando ValidationError directamente...');
        const validationError = new ValidationError(exactUserError);
        handleErrorResponse(validationError.data);
    };
    
    console.log(`
üéÆ Pruebas disponibles:
- simulateErrorResponse('userExact') - Error exacto como el del usuario
- simulateErrorResponse('multiple') - Errores m√∫ltiples
- simulateErrorResponse('single') - Error √∫nico como string
- simulateErrorResponse('server') - Error de servidor
- testValidationError() - Probar ValidationError directamente

üìã Ejemplo de uso:
simulateErrorResponse('userExact');
    `);
}

// Ejecutar al cargar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', testErrorHandling);
} else {
    testErrorHandling();
}